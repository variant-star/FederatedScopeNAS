#[0.0128, 0.984, 0.0032]
wandb:
  use: false  # TODO(Variant)
  name_user: justone
  name_project: distributed_attentive_nas
#  client_train_info: True
  online_track: True # origin: false, why
use_gpu: True
use_amp: True
device: 0
#early_stop:
#  patience: 5
seed: 0
federate:
  method: nas_fl
  mode: standalone
  process_num: 1  # maybe we can use gpus >= 1
  client_num: 8
  total_round_num: 360
  sampler: uniform
#  sample_client_rate: 1.0
  make_global_eval: true  # simulate the global eval
  resource_info_file: ''  # TODO(Variant): for personalized NAS
personalization:
  local_param: []
  share_non_trainable_para: true
data:
  root: data/
  type: cifar10
  splits: [0.8, 0., 0.2]  # TODO(Variant)
#  splits: [0.0128, 0.984, 0.0032]  # TODO(Variant)
  splitter: lda
  splitter_args:
    - alpha: 0.5
#  subsample: 0.05
  consistent_label_distribution: True
  autoaugment: true  # TODO(Variant)
  random_erase: true  # TODO(Variant)
  cutout: true  # TODO(Variant)
#  transform: [['ToTensor'], ['Normalize', {'mean': [0.9637], 'std': [0.1592]}]]
model:
  type: attentive_min_subnet
#  n_classes: 10
  bn_momentum: 0.1
  bn_eps: 0.00001
  drop_out: 0.2  # not work, refer to model_factory.py
  drop_connect: 0.2  # not work, refer to model_factory.py
finetune:
  batch_or_epoch: epoch
  before_eval: false
dataloader:
  type: base
  batch_size: 16
  drop_last: false # only for train dataloader
  shuffle: true # only for train dataloader
  num_workers: 6

# For Client Training:
train:
  local_update_steps: 1
  batch_or_epoch: epoch
  optimizer:
    type: patchSGD
    lr: 0.08  # TODO(Variant): 0.01
    weight_decay: 0.0005
    weight_decay_bn_bias: 0.
  scheduler:
    type: warmup_cosine_scheduler
    #      max_iters: 360 # iters, based on batch num
    warmup_iters: 5 # epoch * num_batch_per_epoch
    clamp_lr: 0.
    warmup_factor: 0.0001
grad:
  grad_clip: 1.0
criterion:
  type: CrossEntropyLoss
trainer:
  type: ensemble_distillation_trainer
eval:
  freq: 1
  metrics: ['acc', 'avg_loss']  # 'correct', 'loss_regular'
  monitoring: []
  split: ['test']
  best_res_update_round_wise_key: 'test_acc'
  report: ['weighted_avg', 'avg', 'fairness', 'raw']

# For Server distillation to knowledge network (training)
server_trainer_specified:
#  type: attentive_min_subnet
  trainer:
    type: ensemble_distillation_trainer
  criterion:
    type: alpha_divergence # pytorch::KLDivLoss
  regularizer:
    mu: 0.0
    type: ''
  dataloader:
    type: base
    batch_size: 16
    drop_last: false # only for train dataloader
    shuffle: true # only for train dataloader
    num_workers: 6
  train:
    batch_or_epoch: epoch
    local_update_steps: 1
    optimizer:
      type: patchSGD
      lr: 0.1 # origin: 0.01
      weight_decay: 0.00001
      weight_decay_bn_bias: 0.
    scheduler:
      type: warmup_cosine_scheduler
#      max_iters: 360 # iters, total_round * batch num
      warmup_iters: 5 # epoch * num_batch_per_epoch
      clamp_lr: 0.
      warmup_factor: 0.0001
  grad:
    grad_clip: 1.0  # TODO(Variant): not sure
  eval:
    freq: 1
    metrics: ['acc', 'avg_loss']
    monitoring: []
    split:  ['test']  # for 'train' split, it has train_transform
    best_res_update_round_wise_key: 'test_acc'
    report: ['weighted_avg', 'avg', 'fairness', 'raw']


# For Server distillation to supernet (training)
supernet_trainer_specified:
  trainer:
    type: ensemble_distillation_trainer
  criterion:
    type: alpha_divergence
  regularizer:
    mu: 0.0
    type: ''
  dataloader:
    type: base
    batch_size: 16
    drop_last: false # only for train dataloader
    shuffle: true # only for train dataloader
    num_workers: 6
  train:
    round_after: 20  # TODO(Variant):
    batch_or_epoch: epoch
    local_update_steps: 1  # TODO(Variant)
    optimizer:
      type: patchSGD
      lr: 0.1 # origin: 0.1
      momentum: 0.9
#      nesterov: True
      weight_decay: 0.0005
      weight_decay_bn_bias: 0.
    scheduler:
      type: warmup_cosine_scheduler
#      max_iters: 360 # iters, based on batch num
      warmup_iters: 5 # epoch * num_batch_per_epoch
      clamp_lr: 0.
      warmup_factor: 0.0001
  grad:
    grad_clip: 1.0  # TODO(Variant): not sure
  eval:
    freq: 1
    metrics: ['acc', 'avg_loss']
    monitoring: []
    split: ['test']  # for 'train' split, it has train_transform
    best_res_update_round_wise_key: 'test_acc'
    report: ['weighted_avg', 'avg', 'fairness', 'raw']


  supernet_arch_sampler:
    num_arch_training: 4
    method: 'bestup'
    arch_to_flops_map_file_path: './attentive_nas_data/flops_archs_off_table.map'
    discretize_step: 25
    num_trials: 3


# related supernet_config
supernet:
  type: attentive_supernet
#  n_classes: 10
  bn_momentum: 0
  bn_eps: 0.00001
  drop_out: 0.2
  drop_connect: 0.2
  drop_connect_only_last_two_stages: True



